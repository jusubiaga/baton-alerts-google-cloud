"use strict";
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Writer = void 0;
const util_1 = require("util");
const protos = require("../../protos/protos");
const version = require('../../../package.json').version;
const DescriptorProto = protos.google.protobuf.DescriptorProto;
/**
 * A BigQuery Storage API Writer that can be used to write data into BigQuery Table
 * using the Storage API.
 *
 * @class
 * @memberof managedwriter
 */
class Writer {
    /**
     * Creates a new Writer instance.
     *
     * @param {WriterOptions} params - The parameters for the Writer.
     *   See WriterOptions docs for more information.
     */
    constructor(params) {
        const { traceId, connection, protoDescriptor, missingValueInterpretations, defaultMissingValueInterpretation, } = params;
        this._traceId = traceId;
        this._streamConnection = connection;
        this._protoDescriptor = new DescriptorProto(protoDescriptor);
        this._defaultMissingValueInterpretation = defaultMissingValueInterpretation;
        this._missingValueInterpretations = missingValueInterpretations;
    }
    traceId() {
        const base = `nodejs-writer:${version}`;
        if (this._traceId) {
            return `${base} ${this._traceId}`;
        }
        return base;
    }
    /**
     * Update the proto descriptor for the Writer.
     * Internally a reconnection event is gonna happen to apply
     * the new proto descriptor.
     *
     * @param {IDescriptorProto} protoDescriptor - The proto descriptor.
     */
    setProtoDescriptor(protoDescriptor) {
        const protoDescriptorInstance = new DescriptorProto(protoDescriptor);
        if (!(0, util_1.isDeepStrictEqual)(protoDescriptorInstance, this._protoDescriptor)) {
            this._protoDescriptor = new DescriptorProto(protoDescriptor);
            // Reopen connection
            this._streamConnection.reconnect();
        }
    }
    /**
     * Update how missing values are interpreted for the given stream.
     *
     * @param {MissingValueInterpretation} defaultMissingValueInterpretation
     */
    setDefaultMissingValueInterpretation(defaultMissingValueInterpretation) {
        this._defaultMissingValueInterpretation = defaultMissingValueInterpretation;
    }
    /**
     * Update how missing values are interpreted for individual columns.
     *
     * @param {MissingValueInterpretationMap} missingValueInterpretations
     */
    setMissingValueInterpretations(missingValueInterpretations) {
        this._missingValueInterpretations = missingValueInterpretations;
    }
    /**
     * Schedules the writing of rows at given offset.
     *
     * @param {google.cloud.bigquery.storage.v1.IProtoRows|null} rows - the rows in serialized format to write to BigQuery.
     * @param {number|Long|string|null} offsetValue - the offset of the first row.
     * @returns {managedwriter.PendingWrite} The pending write
     **/
    appendRows(rows, offsetValue) {
        let offset;
        if (offsetValue !== undefined && offsetValue !== null) {
            offset = {
                value: offsetValue,
            };
        }
        const request = {
            writeStream: this._streamConnection.getStreamId(),
            traceId: this.traceId(),
            protoRows: {
                rows,
                writerSchema: {
                    protoDescriptor: this._protoDescriptor.toJSON(),
                },
            },
            defaultMissingValueInterpretation: this._defaultMissingValueInterpretation,
            missingValueInterpretations: this
                ._missingValueInterpretations,
            offset,
        };
        const pw = this._streamConnection.write(request);
        return pw;
    }
    close() {
        this._streamConnection.close();
    }
}
exports.Writer = Writer;
//# sourceMappingURL=writer.js.map