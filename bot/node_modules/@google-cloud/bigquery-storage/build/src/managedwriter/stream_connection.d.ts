/// <reference types="node" />
import * as gax from 'google-gax';
import { EventEmitter } from 'events';
import * as protos from '../../protos/protos';
import { WriterClient } from './writer_client';
import { PendingWrite } from './pending_write';
type TableSchema = protos.google.cloud.bigquery.storage.v1.ITableSchema;
type IInt64Value = protos.google.protobuf.IInt64Value;
type AppendRowRequest = protos.google.cloud.bigquery.storage.v1.IAppendRowsRequest;
type FinalizeWriteStreamResponse = protos.google.cloud.bigquery.storage.v1.IFinalizeWriteStreamResponse;
type FlushRowsResponse = protos.google.cloud.bigquery.storage.v1.IFlushRowsResponse;
export type RemoveListener = {
    off: () => void;
};
/**
 * StreamConnection is responsible for writing requests to a bidirecional
 * GRPC connection against the Storage Write API appendRows method.
 *
 * All the requests are sent without flow control, and writes are sent
 * in receiving order. It's user's responsibility to do the flow control
 * and maintain the lifetime of the requests.
 *
 * @class
 * @extends EventEmitter
 * @memberof managedwriter
 */
export declare class StreamConnection extends EventEmitter {
    private _streamId;
    private _writeClient;
    private _connection?;
    private _lastConnectionError?;
    private _callOptions?;
    private _pendingWrites;
    constructor(streamId: string, writeClient: WriterClient, options?: gax.CallOptions);
    open(): void;
    private trace;
    private handleError;
    private handleRetry;
    private isRetryableError;
    private isConnectionClosed;
    private resolveCallOptions;
    private handleData;
    /**
     * Callback is invoked when a the server notifies the stream connection
     * of a new Table Schema change.
     */
    onSchemaUpdated(listener: (schema: TableSchema) => void): RemoveListener;
    /**
     * Callback is invoked when an error is received from the server.
     */
    onConnectionError(listener: (err: gax.GoogleError) => void): RemoveListener;
    private registerListener;
    private isDefaultStream;
    /**
     * Get the name of the write stream associated with this connection.
     * When the connection is created withouth a write stream,
     * this method can be used to retrieve the automatically
     * created write stream name.
     */
    getStreamId: () => string;
    private hasPendingWrites;
    private getNextPendingWrite;
    private resendAllPendingWrites;
    private ackAllPendingWrites;
    private ackNextPendingWrite;
    /**
     * Access in-flight write requests.
     */
    getPendingWrites(): PendingWrite[];
    /**
     * Write a request to the bi-directional stream connection.
     *
     * @param {AppendRowRequest} request - request to send.
     *
     * @returns {managedwriter.PendingWrite}
     */
    write(request: AppendRowRequest): PendingWrite;
    private send;
    /**
     * Check if connection is open and ready to send requests.
     */
    isOpen(): boolean;
    /**
     * Re open appendRows BiDi gRPC connection.
     */
    reconnect(): void;
    /**
     * Close the bi-directional stream connection.
     */
    close(): void;
    /**
     * Flushes rows to a BUFFERED stream.
     * If users are appending rows to BUFFERED stream,
     * flush operation is required in order for the rows to become available for reading.
     * A Flush operation flushes up to any previously flushed offset in a BUFFERED stream,
     * to the offset specified in the request.
     *
     * Flush is not supported on the DefaultStream stream, since it is not BUFFERED.
     *
     * @param {number|Long|string|null} request.offset
     *
     * @returns {Promise<FlushRowsResponse | null>}
     */
    flushRows(request?: {
        offset?: IInt64Value['value'];
    }): Promise<FlushRowsResponse | null>;
    /**
     * Finalize a write stream so that no new data can be appended to the
     * stream. Finalize is not supported on the DefaultStream stream.
     *
     * @returns {Promise<FinalizeWriteStreamResponse | null>}
     */
    finalize(): Promise<FinalizeWriteStreamResponse | null>;
}
export {};
