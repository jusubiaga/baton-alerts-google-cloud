import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions } from 'google-gax';
import * as protos from '../../protos/protos';
/**
 *  BigQuery Read API.
 *
 *  The Read API can be used to read data from BigQuery.
 * @class
 * @memberof v1
 */
export declare class BigQueryReadClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    private _universeDomain;
    private _servicePath;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    bigQueryReadStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of BigQueryReadClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new BigQueryReadClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint(): string;
    get universeDomain(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Creates a new read session. A read session divides the contents of a
     * BigQuery table into one or more streams, which can then be used to read
     * data from the table. The read session also specifies properties of the
     * data to be read, such as a list of columns or a push-down filter describing
     * the rows to be returned.
     *
     * A particular row can be read by at most one stream. When the caller has
     * reached the end of each stream in the session, then all the data in the
     * table has been read.
     *
     * Data is assigned to each stream such that roughly the same number of
     * rows can be read from each stream. Because the server-side unit for
     * assigning data is collections of rows, the API does not guarantee that
     * each stream will return the same number or rows. Additionally, the
     * limits are enforced based on the number of pre-filtered rows, so some
     * filters can lead to lopsided assignments.
     *
     * Read sessions automatically expire 6 hours after they are created and do
     * not require manual clean-up by the caller.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The request project that owns the session, in the form of
     *   `projects/{project_id}`.
     * @param {google.cloud.bigquery.storage.v1.ReadSession} request.readSession
     *   Required. Session to be created.
     * @param {number} request.maxStreamCount
     *   Max initial number of streams. If unset or zero, the server will
     *   provide a value of streams so as to produce reasonable throughput. Must be
     *   non-negative. The number of streams may be lower than the requested number,
     *   depending on the amount parallelism that is reasonable for the table.
     *   There is a default system max limit of 1,000.
     *
     *   This must be greater than or equal to preferred_min_stream_count.
     *   Typically, clients should either leave this unset to let the system to
     *   determine an upper bound OR set this a size for the maximum "units of work"
     *   it can gracefully handle.
     * @param {number} request.preferredMinStreamCount
     *   The minimum preferred stream count. This parameter can be used to inform
     *   the service that there is a desired lower bound on the number of streams.
     *   This is typically a target parallelism of the client (e.g. a Spark
     *   cluster with N-workers would set this to a low multiple of N to ensure
     *   good cluster utilization).
     *
     *   The system will make a best effort to provide at least this number of
     *   streams, but in some cases might provide less.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.storage.v1.ReadSession|ReadSession}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/big_query_read.create_read_session.js</caption>
     * region_tag:bigquerystorage_v1_generated_BigQueryRead_CreateReadSession_async
     */
    createReadSession(request?: protos.google.cloud.bigquery.storage.v1.ICreateReadSessionRequest, options?: CallOptions): Promise<[
        protos.google.cloud.bigquery.storage.v1.IReadSession,
        (protos.google.cloud.bigquery.storage.v1.ICreateReadSessionRequest | undefined),
        {} | undefined
    ]>;
    createReadSession(request: protos.google.cloud.bigquery.storage.v1.ICreateReadSessionRequest, options: CallOptions, callback: Callback<protos.google.cloud.bigquery.storage.v1.IReadSession, protos.google.cloud.bigquery.storage.v1.ICreateReadSessionRequest | null | undefined, {} | null | undefined>): void;
    createReadSession(request: protos.google.cloud.bigquery.storage.v1.ICreateReadSessionRequest, callback: Callback<protos.google.cloud.bigquery.storage.v1.IReadSession, protos.google.cloud.bigquery.storage.v1.ICreateReadSessionRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Splits a given `ReadStream` into two `ReadStream` objects. These
     * `ReadStream` objects are referred to as the primary and the residual
     * streams of the split. The original `ReadStream` can still be read from in
     * the same manner as before. Both of the returned `ReadStream` objects can
     * also be read from, and the rows returned by both child streams will be
     * the same as the rows read from the original stream.
     *
     * Moreover, the two child streams will be allocated back-to-back in the
     * original `ReadStream`. Concretely, it is guaranteed that for streams
     * original, primary, and residual, that original[0-j] = primary[0-j] and
     * original[j-n] = residual[0-m] once the streams have been read to
     * completion.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the stream to split.
     * @param {number} request.fraction
     *   A value in the range (0.0, 1.0) that specifies the fractional point at
     *   which the original stream should be split. The actual split point is
     *   evaluated on pre-filtered rows, so if a filter is provided, then there is
     *   no guarantee that the division of the rows between the new child streams
     *   will be proportional to this fractional value. Additionally, because the
     *   server-side unit for assigning data is collections of rows, this fraction
     *   will always map to a data storage boundary on the server side.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.storage.v1.SplitReadStreamResponse|SplitReadStreamResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/big_query_read.split_read_stream.js</caption>
     * region_tag:bigquerystorage_v1_generated_BigQueryRead_SplitReadStream_async
     */
    splitReadStream(request?: protos.google.cloud.bigquery.storage.v1.ISplitReadStreamRequest, options?: CallOptions): Promise<[
        protos.google.cloud.bigquery.storage.v1.ISplitReadStreamResponse,
        (protos.google.cloud.bigquery.storage.v1.ISplitReadStreamRequest | undefined),
        {} | undefined
    ]>;
    splitReadStream(request: protos.google.cloud.bigquery.storage.v1.ISplitReadStreamRequest, options: CallOptions, callback: Callback<protos.google.cloud.bigquery.storage.v1.ISplitReadStreamResponse, protos.google.cloud.bigquery.storage.v1.ISplitReadStreamRequest | null | undefined, {} | null | undefined>): void;
    splitReadStream(request: protos.google.cloud.bigquery.storage.v1.ISplitReadStreamRequest, callback: Callback<protos.google.cloud.bigquery.storage.v1.ISplitReadStreamResponse, protos.google.cloud.bigquery.storage.v1.ISplitReadStreamRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Reads rows from the stream in the format prescribed by the ReadSession.
     * Each response contains one or more table rows, up to a maximum of 100 MiB
     * per response; read requests which attempt to read individual rows larger
     * than 100 MiB will fail.
     *
     * Each request also returns a set of stream statistics reflecting the current
     * state of the stream.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.readStream
     *   Required. Stream to read rows from.
     * @param {number} request.offset
     *   The offset requested must be less than the last row read from Read.
     *   Requesting a larger offset is undefined. If not specified, start reading
     *   from offset zero.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits {@link protos.google.cloud.bigquery.storage.v1.ReadRowsResponse|ReadRowsResponse} on 'data' event.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/big_query_read.read_rows.js</caption>
     * region_tag:bigquerystorage_v1_generated_BigQueryRead_ReadRows_async
     */
    readRows(request?: protos.google.cloud.bigquery.storage.v1.IReadRowsRequest, options?: CallOptions): gax.CancellableStream;
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project: string): string;
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName: string): string | number;
    /**
     * Return a fully-qualified readSession resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} session
     * @returns {string} Resource name string.
     */
    readSessionPath(project: string, location: string, session: string): string;
    /**
     * Parse the project from ReadSession resource.
     *
     * @param {string} readSessionName
     *   A fully-qualified path representing ReadSession resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromReadSessionName(readSessionName: string): string | number;
    /**
     * Parse the location from ReadSession resource.
     *
     * @param {string} readSessionName
     *   A fully-qualified path representing ReadSession resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromReadSessionName(readSessionName: string): string | number;
    /**
     * Parse the session from ReadSession resource.
     *
     * @param {string} readSessionName
     *   A fully-qualified path representing ReadSession resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromReadSessionName(readSessionName: string): string | number;
    /**
     * Return a fully-qualified readStream resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} session
     * @param {string} stream
     * @returns {string} Resource name string.
     */
    readStreamPath(project: string, location: string, session: string, stream: string): string;
    /**
     * Parse the project from ReadStream resource.
     *
     * @param {string} readStreamName
     *   A fully-qualified path representing ReadStream resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromReadStreamName(readStreamName: string): string | number;
    /**
     * Parse the location from ReadStream resource.
     *
     * @param {string} readStreamName
     *   A fully-qualified path representing ReadStream resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromReadStreamName(readStreamName: string): string | number;
    /**
     * Parse the session from ReadStream resource.
     *
     * @param {string} readStreamName
     *   A fully-qualified path representing ReadStream resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromReadStreamName(readStreamName: string): string | number;
    /**
     * Parse the stream from ReadStream resource.
     *
     * @param {string} readStreamName
     *   A fully-qualified path representing ReadStream resource.
     * @returns {string} A string representing the stream.
     */
    matchStreamFromReadStreamName(readStreamName: string): string | number;
    /**
     * Return a fully-qualified table resource name string.
     *
     * @param {string} project
     * @param {string} dataset
     * @param {string} table
     * @returns {string} Resource name string.
     */
    tablePath(project: string, dataset: string, table: string): string;
    /**
     * Parse the project from Table resource.
     *
     * @param {string} tableName
     *   A fully-qualified path representing Table resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTableName(tableName: string): string | number;
    /**
     * Parse the dataset from Table resource.
     *
     * @param {string} tableName
     *   A fully-qualified path representing Table resource.
     * @returns {string} A string representing the dataset.
     */
    matchDatasetFromTableName(tableName: string): string | number;
    /**
     * Parse the table from Table resource.
     *
     * @param {string} tableName
     *   A fully-qualified path representing Table resource.
     * @returns {string} A string representing the table.
     */
    matchTableFromTableName(tableName: string): string | number;
    /**
     * Return a fully-qualified writeStream resource name string.
     *
     * @param {string} project
     * @param {string} dataset
     * @param {string} table
     * @param {string} stream
     * @returns {string} Resource name string.
     */
    writeStreamPath(project: string, dataset: string, table: string, stream: string): string;
    /**
     * Parse the project from WriteStream resource.
     *
     * @param {string} writeStreamName
     *   A fully-qualified path representing WriteStream resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromWriteStreamName(writeStreamName: string): string | number;
    /**
     * Parse the dataset from WriteStream resource.
     *
     * @param {string} writeStreamName
     *   A fully-qualified path representing WriteStream resource.
     * @returns {string} A string representing the dataset.
     */
    matchDatasetFromWriteStreamName(writeStreamName: string): string | number;
    /**
     * Parse the table from WriteStream resource.
     *
     * @param {string} writeStreamName
     *   A fully-qualified path representing WriteStream resource.
     * @returns {string} A string representing the table.
     */
    matchTableFromWriteStreamName(writeStreamName: string): string | number;
    /**
     * Parse the stream from WriteStream resource.
     *
     * @param {string} writeStreamName
     *   A fully-qualified path representing WriteStream resource.
     * @returns {string} A string representing the stream.
     */
    matchStreamFromWriteStreamName(writeStreamName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
