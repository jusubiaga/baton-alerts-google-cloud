import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions } from 'google-gax';
import * as protos from '../../protos/protos';
/**
 *  BigQuery storage API.
 *
 *  The BigQuery storage API can be used to read data stored in BigQuery.
 *
 *  The v1beta1 API is not yet officially deprecated, and will go through a full
 *  deprecation cycle (https://cloud.google.com/products#product-launch-stages)
 *  before the service is turned down. However, new code should use the v1 API
 *  going forward.
 * @class
 * @memberof v1beta1
 */
export declare class BigQueryStorageClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    private _universeDomain;
    private _servicePath;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    bigQueryStorageStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of BigQueryStorageClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new BigQueryStorageClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint(): string;
    get universeDomain(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Creates a new read session. A read session divides the contents of a
     * BigQuery table into one or more streams, which can then be used to read
     * data from the table. The read session also specifies properties of the
     * data to be read, such as a list of columns or a push-down filter describing
     * the rows to be returned.
     *
     * A particular row can be read by at most one stream. When the caller has
     * reached the end of each stream in the session, then all the data in the
     * table has been read.
     *
     * Read sessions automatically expire 6 hours after they are created and do
     * not require manual clean-up by the caller.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.bigquery.storage.v1beta1.TableReference} request.tableReference
     *   Required. Reference to the table to read.
     * @param {string} request.parent
     *   Required. String of the form `projects/{project_id}` indicating the
     *   project this ReadSession is associated with. This is the project that will
     *   be billed for usage.
     * @param {google.cloud.bigquery.storage.v1beta1.TableModifiers} request.tableModifiers
     *   Any modifiers to the Table (e.g. snapshot timestamp).
     * @param {number} request.requestedStreams
     *   Initial number of streams. If unset or 0, we will
     *   provide a value of streams so as to produce reasonable throughput. Must be
     *   non-negative. The number of streams may be lower than the requested number,
     *   depending on the amount parallelism that is reasonable for the table and
     *   the maximum amount of parallelism allowed by the system.
     *
     *   Streams must be read starting from offset 0.
     * @param {google.cloud.bigquery.storage.v1beta1.TableReadOptions} request.readOptions
     *   Read options for this session (e.g. column selection, filters).
     * @param {google.cloud.bigquery.storage.v1beta1.DataFormat} request.format
     *   Data output format. Currently default to Avro.
     *   DATA_FORMAT_UNSPECIFIED not supported.
     * @param {google.cloud.bigquery.storage.v1beta1.ShardingStrategy} request.shardingStrategy
     *   The strategy to use for distributing data among multiple streams. Currently
     *   defaults to liquid sharding.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.storage.v1beta1.ReadSession|ReadSession}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/big_query_storage.create_read_session.js</caption>
     * region_tag:bigquerystorage_v1beta1_generated_BigQueryStorage_CreateReadSession_async
     */
    createReadSession(request?: protos.google.cloud.bigquery.storage.v1beta1.ICreateReadSessionRequest, options?: CallOptions): Promise<[
        protos.google.cloud.bigquery.storage.v1beta1.IReadSession,
        (protos.google.cloud.bigquery.storage.v1beta1.ICreateReadSessionRequest | undefined),
        {} | undefined
    ]>;
    createReadSession(request: protos.google.cloud.bigquery.storage.v1beta1.ICreateReadSessionRequest, options: CallOptions, callback: Callback<protos.google.cloud.bigquery.storage.v1beta1.IReadSession, protos.google.cloud.bigquery.storage.v1beta1.ICreateReadSessionRequest | null | undefined, {} | null | undefined>): void;
    createReadSession(request: protos.google.cloud.bigquery.storage.v1beta1.ICreateReadSessionRequest, callback: Callback<protos.google.cloud.bigquery.storage.v1beta1.IReadSession, protos.google.cloud.bigquery.storage.v1beta1.ICreateReadSessionRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates additional streams for a ReadSession. This API can be used to
     * dynamically adjust the parallelism of a batch processing task upwards by
     * adding additional workers.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.bigquery.storage.v1beta1.ReadSession} request.session
     *   Required. Must be a non-expired session obtained from a call to
     *   CreateReadSession. Only the name field needs to be set.
     * @param {number} request.requestedStreams
     *   Required. Number of new streams requested. Must be positive.
     *   Number of added streams may be less than this, see CreateReadSessionRequest
     *   for more information.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.storage.v1beta1.BatchCreateReadSessionStreamsResponse|BatchCreateReadSessionStreamsResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/big_query_storage.batch_create_read_session_streams.js</caption>
     * region_tag:bigquerystorage_v1beta1_generated_BigQueryStorage_BatchCreateReadSessionStreams_async
     */
    batchCreateReadSessionStreams(request?: protos.google.cloud.bigquery.storage.v1beta1.IBatchCreateReadSessionStreamsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.bigquery.storage.v1beta1.IBatchCreateReadSessionStreamsResponse,
        (protos.google.cloud.bigquery.storage.v1beta1.IBatchCreateReadSessionStreamsRequest | undefined),
        {} | undefined
    ]>;
    batchCreateReadSessionStreams(request: protos.google.cloud.bigquery.storage.v1beta1.IBatchCreateReadSessionStreamsRequest, options: CallOptions, callback: Callback<protos.google.cloud.bigquery.storage.v1beta1.IBatchCreateReadSessionStreamsResponse, protos.google.cloud.bigquery.storage.v1beta1.IBatchCreateReadSessionStreamsRequest | null | undefined, {} | null | undefined>): void;
    batchCreateReadSessionStreams(request: protos.google.cloud.bigquery.storage.v1beta1.IBatchCreateReadSessionStreamsRequest, callback: Callback<protos.google.cloud.bigquery.storage.v1beta1.IBatchCreateReadSessionStreamsResponse, protos.google.cloud.bigquery.storage.v1beta1.IBatchCreateReadSessionStreamsRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Causes a single stream in a ReadSession to gracefully stop. This
     * API can be used to dynamically adjust the parallelism of a batch processing
     * task downwards without losing data.
     *
     * This API does not delete the stream -- it remains visible in the
     * ReadSession, and any data processed by the stream is not released to other
     * streams. However, no additional data will be assigned to the stream once
     * this call completes. Callers must continue reading data on the stream until
     * the end of the stream is reached so that data which has already been
     * assigned to the stream will be processed.
     *
     * This method will return an error if there are no other live streams
     * in the Session, or if SplitReadStream() has been called on the given
     * Stream.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.bigquery.storage.v1beta1.Stream} request.stream
     *   Required. Stream to finalize.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/big_query_storage.finalize_stream.js</caption>
     * region_tag:bigquerystorage_v1beta1_generated_BigQueryStorage_FinalizeStream_async
     */
    finalizeStream(request?: protos.google.cloud.bigquery.storage.v1beta1.IFinalizeStreamRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        (protos.google.cloud.bigquery.storage.v1beta1.IFinalizeStreamRequest | undefined),
        {} | undefined
    ]>;
    finalizeStream(request: protos.google.cloud.bigquery.storage.v1beta1.IFinalizeStreamRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.bigquery.storage.v1beta1.IFinalizeStreamRequest | null | undefined, {} | null | undefined>): void;
    finalizeStream(request: protos.google.cloud.bigquery.storage.v1beta1.IFinalizeStreamRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.bigquery.storage.v1beta1.IFinalizeStreamRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Splits a given read stream into two Streams. These streams are referred to
     * as the primary and the residual of the split. The original stream can still
     * be read from in the same manner as before. Both of the returned streams can
     * also be read from, and the total rows return by both child streams will be
     * the same as the rows read from the original stream.
     *
     * Moreover, the two child streams will be allocated back to back in the
     * original Stream. Concretely, it is guaranteed that for streams Original,
     * Primary, and Residual, that Original[0-j] = Primary[0-j] and
     * Original[j-n] = Residual[0-m] once the streams have been read to
     * completion.
     *
     * This method is guaranteed to be idempotent.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.bigquery.storage.v1beta1.Stream} request.originalStream
     *   Required. Stream to split.
     * @param {number} request.fraction
     *   A value in the range (0.0, 1.0) that specifies the fractional point at
     *   which the original stream should be split. The actual split point is
     *   evaluated on pre-filtered rows, so if a filter is provided, then there is
     *   no guarantee that the division of the rows between the new child streams
     *   will be proportional to this fractional value. Additionally, because the
     *   server-side unit for assigning data is collections of rows, this fraction
     *   will always map to to a data storage boundary on the server side.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.storage.v1beta1.SplitReadStreamResponse|SplitReadStreamResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/big_query_storage.split_read_stream.js</caption>
     * region_tag:bigquerystorage_v1beta1_generated_BigQueryStorage_SplitReadStream_async
     */
    splitReadStream(request?: protos.google.cloud.bigquery.storage.v1beta1.ISplitReadStreamRequest, options?: CallOptions): Promise<[
        protos.google.cloud.bigquery.storage.v1beta1.ISplitReadStreamResponse,
        (protos.google.cloud.bigquery.storage.v1beta1.ISplitReadStreamRequest | undefined),
        {} | undefined
    ]>;
    splitReadStream(request: protos.google.cloud.bigquery.storage.v1beta1.ISplitReadStreamRequest, options: CallOptions, callback: Callback<protos.google.cloud.bigquery.storage.v1beta1.ISplitReadStreamResponse, protos.google.cloud.bigquery.storage.v1beta1.ISplitReadStreamRequest | null | undefined, {} | null | undefined>): void;
    splitReadStream(request: protos.google.cloud.bigquery.storage.v1beta1.ISplitReadStreamRequest, callback: Callback<protos.google.cloud.bigquery.storage.v1beta1.ISplitReadStreamResponse, protos.google.cloud.bigquery.storage.v1beta1.ISplitReadStreamRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Reads rows from the table in the format prescribed by the read session.
     * Each response contains one or more table rows, up to a maximum of 10 MiB
     * per response; read requests which attempt to read individual rows larger
     * than this will fail.
     *
     * Each request also returns a set of stream statistics reflecting the
     * estimated total number of rows in the read stream. This number is computed
     * based on the total table size and the number of active streams in the read
     * session, and may change as other streams continue to read data.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.bigquery.storage.v1beta1.StreamPosition} request.readPosition
     *   Required. Identifier of the position in the stream to start reading from.
     *   The offset requested must be less than the last row read from ReadRows.
     *   Requesting a larger offset is undefined.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits {@link protos.google.cloud.bigquery.storage.v1beta1.ReadRowsResponse|ReadRowsResponse} on 'data' event.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/big_query_storage.read_rows.js</caption>
     * region_tag:bigquerystorage_v1beta1_generated_BigQueryStorage_ReadRows_async
     */
    readRows(request?: protos.google.cloud.bigquery.storage.v1beta1.IReadRowsRequest, options?: CallOptions): gax.CancellableStream;
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project: string): string;
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName: string): string | number;
    /**
     * Return a fully-qualified readSession resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} session
     * @returns {string} Resource name string.
     */
    readSessionPath(project: string, location: string, session: string): string;
    /**
     * Parse the project from ReadSession resource.
     *
     * @param {string} readSessionName
     *   A fully-qualified path representing ReadSession resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromReadSessionName(readSessionName: string): string | number;
    /**
     * Parse the location from ReadSession resource.
     *
     * @param {string} readSessionName
     *   A fully-qualified path representing ReadSession resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromReadSessionName(readSessionName: string): string | number;
    /**
     * Parse the session from ReadSession resource.
     *
     * @param {string} readSessionName
     *   A fully-qualified path representing ReadSession resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromReadSessionName(readSessionName: string): string | number;
    /**
     * Return a fully-qualified stream resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} stream
     * @returns {string} Resource name string.
     */
    streamPath(project: string, location: string, stream: string): string;
    /**
     * Parse the project from Stream resource.
     *
     * @param {string} streamName
     *   A fully-qualified path representing Stream resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromStreamName(streamName: string): string | number;
    /**
     * Parse the location from Stream resource.
     *
     * @param {string} streamName
     *   A fully-qualified path representing Stream resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromStreamName(streamName: string): string | number;
    /**
     * Parse the stream from Stream resource.
     *
     * @param {string} streamName
     *   A fully-qualified path representing Stream resource.
     * @returns {string} A string representing the stream.
     */
    matchStreamFromStreamName(streamName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
