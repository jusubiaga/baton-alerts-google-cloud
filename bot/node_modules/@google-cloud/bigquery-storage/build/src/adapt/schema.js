"use strict";
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertBigQuerySchemaToStorageTableSchema = void 0;
const protos = require("../../protos/protos");
const schema_mappings_1 = require("./schema_mappings");
const StorageTableSchema = protos.google.cloud.bigquery.storage.v1.TableSchema;
const StorageTableField = protos.google.cloud.bigquery.storage.v1.TableFieldSchema;
/**
 * Converts a bigquery Schema into the protobuf-based TableSchema used
 * by the BigQuery Storage WriteClient.
 * @param schema - a BigQuery TableSchema
 * @return StorageTableSchema
 */
function convertBigQuerySchemaToStorageTableSchema(schema) {
    var _a;
    const out = {};
    for (const field of (_a = schema.fields) !== null && _a !== void 0 ? _a : []) {
        const converted = bqFieldToStorageField(field);
        if (!converted) {
            throw Error(`failed to convert field ${field.name}`);
        }
        if (!out.fields) {
            out.fields = [];
        }
        out.fields.push(converted);
    }
    return out;
}
exports.convertBigQuerySchemaToStorageTableSchema = convertBigQuerySchemaToStorageTableSchema;
function bqFieldToStorageField(field) {
    var _a;
    const out = {
        name: field.name,
    };
    if (field.description) {
        out.description = field.description;
    }
    if (!field.type) {
        throw Error(`could not convert field (${field.name}) due to unknown type value: ${field.type}`);
    }
    const ftype = schema_mappings_1.fieldTypeMap[field.type];
    if (!ftype) {
        throw Error(`could not convert field (${field.name}) due to unknown type value: ${field.type}`);
    }
    out.type = ftype;
    out.mode = StorageTableField.Mode.NULLABLE;
    if (field.mode) {
        out.mode = schema_mappings_1.modeMap[field.mode];
    }
    for (const subField of (_a = field.fields) !== null && _a !== void 0 ? _a : []) {
        const converted = bqFieldToStorageField(subField);
        if (!out.fields) {
            out.fields = [];
        }
        out.fields.push(converted);
    }
    if (field.rangeElementType && field.rangeElementType.type) {
        const rtype = schema_mappings_1.fieldTypeMap[field.rangeElementType.type];
        if (!rtype) {
            throw Error(`could not convert range field (${field.name}) due to unknown range element type: ${field.rangeElementType.type}`);
        }
        out.rangeElementType = {
            type: rtype,
        };
    }
    return out;
}
//# sourceMappingURL=schema.js.map